@page "/school"
@inject ISchoolManager schoolManager

@attribute [Authorize]

<link href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">

<style>
    .sort-th {
        cursor: pointer;
    }

    .fa {
        float: right;
    }

    .btn-custom {
        color: black;
        float: left;
        padding: 8px 16px;
        text-decoration: none;
        transition: background-color .3s;
        border: 2px solid #000;
        margin: 0px 5px 0px 5px;
    }
</style>

<div class="row" style="padding-top:10px">
    <div class="col-md-4">
        <h6>Choose your environment:</h6>
    </div>
    <div class="col-md-4">
        <select class="form-control" @onchange="selectedstring" style="width:200px">
            <option value="">select one</option>
            @foreach (var env in environments)
            {
                <option value="@env">@env</option>
            }
        </select>

    </div>
</div>
<div class="row" style="padding-top:20px">
    <button class="btn btn-primary" @onclick="clickme">Fetch</button>
</div>

<p>You have selected @a </p>

@if (a == "ENVIRONMENT 1")
{
    @if (schoolModel == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div class="row col-md-3 pull-right">
            <input type="text" id="txtSearch" placeholder="Search Titles..." class="form-control" @bind="SearchTerm" @bind:event="oninput" />
        </div>
        <table class="table table-bordered table-hover">
            <thead>
                <tr>
                    <th class="sort-th" @onclick="@(() => SortTable("ID"))">
                        ID
                        <span class="fa @(SetSortIcon("ID"))"></span>
                    </th>
                    <th class="sort-th" @onclick="@(() => SortTable("Title"))">
                        Title
                        <span class="fa @(SetSortIcon("Title"))"></span>
                    </th>
                </tr>
            </thead>
            <tbody>
                @if (schoolModel == null || schoolModel.Count == 0)
                {
                    <tr>
                        <td colspan="3">
                            No Records to display
                        </td>
                    </tr>
                }
                else
                {
                    foreach (var article in schoolModel)
                    {
                        <tr>
                            <td>@article.ID</td>
                            <td>@article.Title</td>
                        </tr>
                    }
                }

            </tbody>
        </table>

        <div class="pagination">
            <button class="btn btn-custom" @onclick=@(async () => await NavigateToPage("previous"))>Prev</button>

            @for (int i = startPage; i <= endPage; i++)
            {
                var currentPage = i;
                <button class="btn btn-custom pagebutton @(currentPage == curPage ? "btn-danger" : "")" @onclick=@(async () => await refreshRecords(currentPage))>
                    @currentPage
                </button>
            }

            <button class="btn btn-custom" @onclick=@(async () => await NavigateToPage("next"))>Next</button>

        </div>

    }
}

else if (a == "ENVIRONMENT 2")
{
    @if (sm == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div class="row col-md-3 pull-right">
            <input type="text" id="txtSearch" placeholder="Search Titles..." class="form-control" @bind="SearchTerm" @bind:event="oninput" />
        </div>
        <table class="table table-bordered table-hover">
            <thead>
                <tr>
                    <th class="sort-th" @onclick="@(() => SortTable("ID"))">
                        ID
                        <span class="fa @(SetSortIcon("ID"))"></span>
                    </th>
                    <th class="sort-th" @onclick="@(() => SortTable("Title"))">
                        Title
                        <span class="fa @(SetSortIcon("Title"))"></span>
                    </th>
                </tr>
            </thead>
            <tbody>
                @if (sm == null || sm.Count == 0)
                {
                    <tr>
                        <td colspan="3">
                            No Records to display
                        </td>
                    </tr>
                }
                else
                {
                    foreach (var a in sm)
                    {
                        <tr>
                            <td>@a.ID</td>
                            <td>@a.Title</td>
                        </tr>
                    }
                }

            </tbody>
        </table>
        <div class="pagination">
            <button class="btn btn-custom" @onclick=@(async () => await NavigateToPage("previous"))>Prev</button>

            @for (int i = startPage; i <= endPage; i++)
            {
                var currentPage = i;
                <button class="btn btn-custom pagebutton @(currentPage == curPage ? "btn-danger" : "")" @onclick=@(async () => await refreshRecords1(currentPage))>
                    @currentPage
                </button>
            }

            <button class="btn btn-custom" @onclick=@(async () => await NavigateToPage("next"))>Next</button>

        </div>

    }
}
else
{

}


@code {
    private string searchTerm;
    private string SearchTerm
    {
        get { return searchTerm; }
        set { searchTerm = value; FilterRecords(); }
    }

    List<School> schoolModel;
    List<School> sm;
    // Article articleEntity = new Article();


    #region Pagination

    int totalPages;
    int totalRecords;
    int curPage;
    int pagerSize;
    int pageSize;
    int startPage;
    int endPage;
    string sortColumnName = "ID";
    string sortDir = "DESC";

    #endregion

    protected override async Task OnInitializedAsync()
    {
        //display total page buttons
        pagerSize = 3;
        pageSize = 5;
        curPage = 1;
        schoolModel = await schoolManager.ListAll((curPage - 1) * pageSize, pageSize, sortColumnName, sortDir, searchTerm);
        sm = await schoolManager.ListAllENV2((curPage - 1) * pagerSize, pagerSize, sortColumnName, sortDir, SearchTerm);
        totalRecords = await schoolManager.Count(searchTerm);
        totalPages = (int)Math.Ceiling(totalRecords / (decimal)pageSize);
        SetPagerSize("forward");
    }

    private bool isSortedAscending;
    private string activeSortColumn;

    private async Task<List<School>> SortRecords(string columnName, string dir)
    {
        return await schoolManager.ListAll((curPage - 1) * pageSize, pageSize, columnName, dir, searchTerm);
    }
    private async Task<List<School>> SortRecords1(string columnName, string dir)
    {
        return await schoolManager.ListAllENV2((curPage - 1) * pageSize, pageSize, columnName, dir, searchTerm);
    }


    private async Task SortTable(string columnName)
    {
        if (columnName != activeSortColumn)
        {
            schoolModel = await SortRecords(columnName, "ASC");
            isSortedAscending = true;
            activeSortColumn = columnName;
        }
        else
        {
            if (isSortedAscending)
            {
                schoolModel = await SortRecords(columnName, "DESC");
            }
            else
            {
                schoolModel = await SortRecords(columnName, "ASC");
            }

            isSortedAscending = !isSortedAscending;
        }
        sortColumnName = columnName;
        sortDir = isSortedAscending ? "ASC" : "DESC";
    }
    private async Task SortTable1(string columnName)
    {
        if (columnName != activeSortColumn)
        {
            sm = await SortRecords1(columnName, "ASC");
            isSortedAscending = true;
            activeSortColumn = columnName;
        }
        else
        {
            if (isSortedAscending)
            {
                sm = await SortRecords1(columnName, "DESC");
            }
            else
            {
                sm = await SortRecords1(columnName, "ASC");
            }

            isSortedAscending = !isSortedAscending;
        }
        sortColumnName = columnName;
        sortDir = isSortedAscending ? "ASC" : "DESC";
    }

    private string SetSortIcon(string columnName)
    {
        if (activeSortColumn != columnName)
        {
            return string.Empty;
        }
        if (isSortedAscending)
        {
            return "fa-sort-up";
        }
        else
        {
            return "fa-sort-down";
        }
    }

    public async Task refreshRecords(int currentPage)
    {
        schoolModel = await schoolManager.ListAll((currentPage - 1) * pageSize, pageSize, sortColumnName, sortDir, searchTerm);
        curPage = currentPage;
        this.StateHasChanged();
    }
    public async Task refreshRecords1(int currentPage)
    {
        sm = await schoolManager.ListAllENV2((currentPage - 1) * pageSize, pageSize, sortColumnName, sortDir, searchTerm);
        curPage = currentPage;
        this.StateHasChanged();
    }

    public void SetPagerSize(string direction)
    {
        if (direction == "forward" && endPage < totalPages)
        {
            startPage = endPage + 1;
            if (endPage + pagerSize < totalPages)
            {
                endPage = startPage + pagerSize - 1;
            }
            else
            {
                endPage = totalPages;
            }
            this.StateHasChanged();
        }
        else if (direction == "back" && startPage > 1)
        {
            endPage = startPage - 1;
            startPage = startPage - pagerSize;
        }
        else
        {
            startPage = 1;
            endPage = totalPages;
        }
    }

    public async Task NavigateToPage(string direction)
    {
        if (direction == "next")
        {
            if (curPage < totalPages)
            {
                if (curPage == endPage)
                {
                    SetPagerSize("forward");
                }
                curPage += 1;
            }
        }
        else if (direction == "previous")
        {
            if (curPage > 1)
            {
                if (curPage == startPage)
                {
                    SetPagerSize("back");
                }
                curPage -= 1;
            }
        }
        await refreshRecords(curPage);
    }

    public void FilterRecords()
    {
        endPage = 0;
        this.OnInitializedAsync().Wait();
    }

    string a;

    List<string> environments = new List<string>()
{
       "ENVIRONMENT 1", "ENVIRONMENT 2"
    };
    public string SelectedValue = "";

    public void selectedstring(ChangeEventArgs e)
    {
        SelectedValue = e.Value.ToString();
    }

    private void clickme()
    {
        if (SelectedValue == "ENVIRONMENT 1")
        {
            a = SelectedValue;
        }
        else if (SelectedValue == "ENVIRONMENT 2")
        {
            a = SelectedValue;
        }
        else
        {
            a = "select one";
        }

    }

}
